/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-01-30 03:14:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class boardDetail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<body>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>boardDetail.jsp 게시글 상세페이지 </title>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"./css/bootstrap.min.css\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../menu.jsp", out, false);
      out.write("\r\n");
      out.write("  <div class=\"jumbotron\">\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <h1 class=\"display-3\"> 게시글 상세페이지 </h1> \r\n");
      out.write("    </div>\r\n");
      out.write("  </div> \r\n");
      out.write("  ");

  
  	request.setCharacterEncoding("utf-8");
    String num = request.getParameter("num");
    String title = request.getParameter("title");
    String content = request.getParameter("content");
    String writer = request.getParameter("writer");
    String regdate = request.getParameter("regdate");
    String count = request.getParameter("count");    
    
  
      out.write("\r\n");
      out.write("  \r\n");
      out.write("  \r\n");
      out.write("  <div class=\"container\">\r\n");
      out.write("  	    \r\n");
      out.write("    <div style=\"padding-top: 50px\">\r\n");
      out.write("	 <table class=\"table table-hover\">\r\n");
      out.write("    	\r\n");
      out.write("    	<tr> <th>글번호</th> <th> ");
      out.print( num );
      out.write("  </th> </tr>\r\n");
      out.write("    	<tr> <th>글제목</th> <th> ");
      out.print( title );
      out.write("  </th> </tr>\r\n");
      out.write("    	<tr> <th>글내용</th> <th> ");
      out.print( content );
      out.write("  </th> </tr>\r\n");
      out.write("    	<tr> <th>작성자</th> <th> ");
      out.print( writer );
      out.write("  </th> </tr>\r\n");
      out.write("    	<tr> <th>작성일</th> <th> ");
      out.print( regdate );
      out.write("  </th> </tr>\r\n");
      out.write("    	<tr> <th>조회수</th> <th> ");
      out.print( count );
      out.write(" </th> </tr>\r\n");
      out.write("    	 \r\n");
      out.write("     </table>	\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("\r\n");
      out.write("   ");

   Integer count1 = Integer.valueOf(count) + 1 ;  //조회수 1을 증가하기 위해 정수형으로 변환
   int count2 = count1.intValue();
   int num1 = Integer.valueOf(num).intValue();
   
   //DB 에 update
   Class.forName("com.mysql.jdbc.Driver");
            
       String url = "jdbc:mysql://localhost:3306/webmarket?characterEncoding=UTF-8&serverTimezone=UTC&useSSL=false";   
       String userId ="root";
       String userPwd="1234";
       
       //2. con 연결
       Connection con = DriverManager.getConnection(url, userId, userPwd); 
	   //3. sql문 작성하기 num, title, content, writer, reg_date, count
	   String updateSql = "update boardTbl set count = count + ? where num  = ?";
	   //4. sql문 실행
	   PreparedStatement pstmt =  con.prepareStatement(updateSql);
	   //?
       
	   pstmt.setInt(1, count2);
       pstmt.setInt(2, num1);
       
       
	   pstmt.executeUpdate(); // insert, update, delete 문 실행하는 메소드
	   
   
      out.write("\r\n");
      out.write("   \r\n");
      out.write("      <a href=\"boardList.jsp\" class=\"btn btn-primary\"> 게시판으로 </a> \r\n");
      out.write("    \r\n");
      out.write("  ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../footer.jsp", out, false);
      out.write("\r\n");
      out.write("  \r\n");
      out.write("  </body>\r\n");
      out.write("  </html>\r\n");
      out.write("  ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
