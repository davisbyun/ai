/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-01-23 04:01:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch08;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class vali02_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1>vali02.jsp</h1>\r\n");
      out.write("  <form name=\"loginForm\" action=\"proVali02.jsp\" , method=\"post\">\r\n");
      out.write("	<p> 아이디 : <input type=\"text\" name=\"id\">\r\n");
      out.write("	<p> 비밀번호 : <input type=\"password\" name=\"pwd\">\r\n");
      out.write("	<p> 이름 : <input type=\"text\" name=\"irum\">\r\n");
      out.write("	<p> <input type=\"button\" value=\"로그인\" onclick=\"loginCheck()\">\r\n");
      out.write("	</form>\r\n");
      out.write("  <script type=\"text/javascript\">\r\n");
      out.write("	\r\n");
      out.write("	 function loginCheck() {\r\n");
      out.write("	  	var form = document.loginForm;\r\n");
      out.write("	  	if(form.id.value==\"\"){\r\n");
      out.write("	  		alert(\"아이디를 입력해 주세요\");\r\n");
      out.write("	  		form.id.focus();\r\n");
      out.write("	  		return false;\r\n");
      out.write("	  	}else if(form.pwd.value==\"\"){\r\n");
      out.write("	  		alert(\"비밀번호를 입력해 주세요\");\r\n");
      out.write("	  		form.pwd.focus();\r\n");
      out.write("	  		return false;\r\n");
      out.write("	  	}else if(form.irum.value==\"\"){\r\n");
      out.write("	  		alert(\"이름을 입력해 주세요\")\r\n");
      out.write("	  		form.irum.focus();\r\n");
      out.write("	  		return false;\r\n");
      out.write("	  	}else if(form.id.value.length < 6 || form.id.value.length >12 ) {\r\n");
      out.write("	 		alert(\"이름의 길이는 6~12자 사이어야 합니다.\");\r\n");
      out.write("	 		form.id.focus();\r\n");
      out.write("	  		return false;\r\n");
      out.write("	  	}else if(form.id.value.length >= 6 || form.id.value.length <= 12 ){\r\n");
      out.write("	  		for(i=0; i<form.id.value.length; i++) {\r\n");
      out.write("	  			var ch = form.id.value.charAt(i);\r\n");
      out.write("	  			if(!(ch >= 'a' && ch <='z')) {\r\n");
      out.write("	  				alert(\"아이디는 영문 소문자만 입력 가능합니다.\");\r\n");
      out.write("	  				form.id.foucs();\r\n");
      out.write("	  				return false;\r\n");
      out.write("	  			}\r\n");
      out.write("	  		}\r\n");
      out.write("\r\n");
      out.write("	 	}else if(form.pwd.value.length < 4 ) {\r\n");
      out.write("		 	alert(\"비밀번호는 4글자 이상을 입력해 주세요\");\r\n");
      out.write("	  		form.pwd.focus();\r\n");
      out.write("  			return false;\r\n");
      out.write("  			\r\n");
      out.write("	 	}if(form.pwd.value.length >= 4 ){\r\n");
      out.write("	  		for(i=0; i<form.pwd.value.length; i++) {\r\n");
      out.write("	  			var ch = form.pwd.value.charAt(i);\r\n");
      out.write("	  			if(!(ch >= '0' && ch <='9')) {\r\n");
      out.write("	  				alert(\"비밀번호는 숫자만 입력 가능합니다.\");\r\n");
      out.write("	  				form.pwd.foucs();\r\n");
      out.write("	  				return false;\r\n");
      out.write("	  			}\r\n");
      out.write("	  		}	\r\n");
      out.write("  			\r\n");
      out.write("	 	}\r\n");
      out.write("	 	\r\n");
      out.write("	 	if(!isNaN(form.irum.value.substr(0,1)) ) {//substr(0,1) 0번 인덱스에 1글자 첫글자 뜯어내기, isNaN () 첫글자 숫자이면 flase,  숫자가 아니면  ture\r\n");
      out.write("	 		alert(\"이름의 첫글자는 숫자이면 안된다.\") // 1이순신-true  이순신1-false\r\n");
      out.write("	 		form.irum.focus();\r\n");
      out.write("	  		return false;\r\n");
      out.write("	    }\r\n");
      out.write("	 form.submit(); 	\r\n");
      out.write("	 }\r\n");
      out.write("	  	\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
