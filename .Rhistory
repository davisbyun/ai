tmp1 <- subset( swiss, Catholic >= 80 )
tmp1 ['Agriculture']
subset( swiss, Catholic >= 80 )['Agriculture']
subset(swiss, Examination <20 & Agriculture <50)
subset(swiss, Examination <20 & Agriculture <50)[c('Examination', 'Agriculrure' )]
tmp1 ['Agriculture']
tmp1 <- subset( swiss, Catholic >= 80 )
subset(swiss, Examination <20 & Agriculture <50)[ c( 'Examination', 'Agriculrure' ) ]
subset(swiss, Examination <20 & Agriculture <50)[ c( 'Examination', 'Agriculrure' ) ]
subset(swiss, Examination <20 & Agriculture <50)[ c( 'Examination', 'Agriculrure' ) ]
subset( swiss, Examination <20 & Agriculture <50 )[ c( 'Examination', 'Agriculrure' ) ]
subset( swiss, Examination <20 & Agriculture <50 )[ c( 'Examination', 'Agricultrure' ) ]
subset( swiss, Examination <20 & Agriculture <50 )[ c( 'Examination', 'Agriculture' ) ]
state.x77
subset( state.x77, Income>=5000 )
subset( state.x77, Income >= 5000 )
state.x77
subset( state.x77, Income >= 5000 )
subset( state.x77, Income >= 5000 )
subset(state.x77, Income)
subset( state.x77, Income >= 5000 )[c( 'Population','Area')]
subset( state.x77, Income >= 5000 )[c( 'Population','Area')]
state.x77
my.state.x77 <- subset( state.x77, Income >= 5000 )[c( 'Population','Area')]
write.csv(my.state.x77, "myx77.csv", row.names = F)
state.x77
subset( state.x77, state.x77$Income >= 5000 )[c( 'Population','Area')]
calss(state.x77)
head(st)
st <- data.frame(state.x77)
head(st)
class(st)
subset( state.x77, state.x77$Income >= 5000 )[c( 'Population','Area')]
subset( st, st$Income >= 5000 )[c( 'Population','Area')]
my.state.x77 <- subset( state.x77, Income >= 5000 )[c( 'Population','Area')]
my.st <- subset( st, st$Income >= 5000 )[c( 'Population','Area')]
write.csv(st, "myx77.csv", row.names = F)
subset( st, st$Income >= 5000 )[c( 'Income', 'Population','Area')]
setwd('D://ai/study/r_study')
my.st <- subset( st, st$Income >= 5000 )[c( 'Income', 'Population','Area')]
write.csv(st, "myx77.csv", row.names = F)
write.csv(rich_state.csv, D://ai/study/r_study/rich_state.csv)
write.csv(rich_state.csv, D:/ai/study/r_study/rich_state.csv)
write.csv(rich_state.csv, d:/ai/study/r_study/rich_state.csv)
write.csv(rich_state.csv, d:ai/study/r_study/rich_state.csv)
write.csv(rich_state, d:ai/study/r_study/rich_state.csv)
write.csv(rich_state, d:/ai/study/r_study/rich_state.csv)
write.csv(rich_state, 'd:/ai/study/r_study/rich_state.csv')
ds <- read.csv('d:/ai/study/r_study/rich_state.csv')
write.csv(rich_state, 'd:/ai/study/r_study/rich_state.csv')
class(st)
score <- cbind(m,f)
m <- c(10,40,60,20)
f <- c(21,60,70,30)
score <- cbind(m,f)
score
colnames(score) <- c('male','female')
score[,2]
score['female']
score[,'female']
score[3,2]
mtcars
class(mtcars)
dim(mtcars)
str(mrcars)
str(mrcars)
str(mtcars)
mtcars
help(,1)
help(,1)
max(mtcars$mpg)
subset(mtcars, mtcars$mpg == max(mtcars$mpg))
rownames(subset(mtcars, mtcars$mpg == max(mtcars$mpg)))
sumbset(mtcars, mtcars$g)
sumbset(mtcars, mtcars$gear==4)
sumbset(mtcars, mtcars$gear == 4)
subset(mtcars, mtcars$gear == 4)
min(mtcars$mpg)
min(   (mtcars$mpg)  ) & g.4
min( mtcars [ mtcars$gear ==4, 'mpg' ])
rownames( min( mtcars [ mtcars$gear ==4, 'mpg' ]) )
rownames(,  min( mtcars [ mtcars$gear ==4, 'mpg' ]) )
rownames(  subset(mtcars,  mtcars$gear==mpg.min) )
mpg.min <- min( mtcars [ mtcars$gear ==4, 'mpg' ])
rownames(  subset(mtcars,  mtcars$gear==mpg.min) )
g.4 <- subset(mtcars, mtcars$gear == 4)
mpg.min <- min( mtcars [ mtcars$gear ==4, 'mpg' ])
rownames(  subset(mtcars,  mtcars$gear==mpg.min) )
mpg.min <- min( mtcars [ g.4, 'mpg' ])
rownames(  subset(mtcars,  mtcars$gear==mpg.min) )
rownames(  subset(mtcars,  mpg==mpg.min) )
head(mtcars)
mtcars('Honda Civic', c('mpg','gear') )
mtcars('Honda Civic', c('mpg','gear') )
mtcars['Pontiac Firebird', 'mpg']
mtcars('Honda Civic', c('mpg','gear') )
rownames(subset(mtcars, mpg>p.mpg))
mtcars['Pontiac Firebird', 'mpg']
rownames(subset(mtcars, mpg>p.mpg))
head(mtcars)
p.mpg <- mtcars[ 'Honda Civic', c('mpg','gear') ]
mtcars['Pontiac Firebird', 'mpg']
rownames(subset(mtcars, mpg>p.mpg))
mean(mtcars$mpg)
mtcars('gear')
mtcars$gear
unique(mtcars$gear)
for(i in 1:9)
cat('2*',i, '=', 2*i, '\n' )
for(i in 1:9)
cat('2 *',i, '=', 2*i, '\n' )
for(k in 2:9) {
for(i in 1:9) {
cat('k *',i, '=', k*i, '\n' )
}
}
for(k in 2:9) {
for(i in 1:9) {
cat(k, '*',i, '=', k*i, '\n' )
}
}
norow <- nrow(iris) 		# iris의 행의 수
class(iris)
heas(iris)
mylabel <- c( ) 			# 비어 있는 벡터 선언
for(i in 1:norow) {
if (iris$Petal.Length[i] <= 1.6) { # 꽃잎의 길이에 따라 레이블 결정
mylabel[i] <- 'L’
} else if (iris$Petal.Length[i] >= 5.1) {
mylabel[i] <- 'H’
norow <- nrow(iris) 		# iris의 행의 수
norow <- nrow(iris) 		# iris의 행의 수
mylabel <- c( ) 			# 비어 있는 벡터 선언
for(i in 1:norow) {
if (iris$Petal.Length[i] <= 1.6 ) {
mylabel[i] <- 'L’
} else if (iris$Petal.Length[i] >= 5.1) {
mylabel[i] <- 'H'
norow <- nrow(iris) 		# iris의 행의 수
for(i in 1:norow) {
mylabel[i] <- 'L’
} else if (iris$Petal.Length[i] >= 5.1) {
mylabel[i] <- 'H'
mylabel[i] <- 'L’
} else if (iris$Petal.Length[i] >= 5.1) {
mylabel[i] <- 'H'
mylabel[i] <- 'L’
} else if (iris$Petal.Length[i] >= 5.1) {
mylabel[i] <- 'H'
if (iris$Petal.Length[i] <= 1.6 ) {
mylabel[i] <- 'L’
} else if (iris$Petal.Length[i] >= 5.1) {
mylabel[i] <- 'H'
i <- 0
i <- 0
sum <- 0
for(i in range 1:100 ) {
sum
i <- 0
sum <- 0
for(i in 1:100 ) {
if( i %% 3 == 0 ) next
sum < sum + i
i <- i +1
}
sum
i <- 0
sum <- 0
for(i in 1:100 ) {
if( i %% 3 == 0 )
sum < sum + i
i <- i + 1
}
sum
sum <- 0
i <- 0
for(i in 101:200 ) {
if( i%%3 ==0 | i%%4)
sum <- sum +1
i <-  i+1
}
sum <- 0
i <- 0
for(i in 101:200 ) {
if( i%%3 ==0 | i%%4)
sum <- sum +1
i <-  i+1
}
sum <- 0
i <- 0
for(i in 101:200 ) {
if( i%%3 ==0 | i%%4 ==0)
sum <- sum +1
i <-  i+1
}
print(sum)
print(sum)
i <- 0
sum <- 0
for(i in 1:100 ) {
if( i %% 3 == 0 )
sum <- sum + i
i <- i + 1
}
print(sum)
sum <- 0
i <- 0
for(i in 101:200 ) {
if( i%%3 ==0 | i%%4 ==0)
sum <- sum +1
i <-  i+1
}
print(sum)
count <- 0
sum <- 0
for(i in 1:100 ) {
if( i %% 3 == 0 )
sum <- sum + i
i <- count + 1
count <- count +1
}
print(sum)
count
count <- 0
sum <- 0
for(i in 1:100 ) {
if( i %% 3 == 0 )
sum <- sum + i
i <- count + 1
cnt <- count +1
}
print(sum)
cnt
cnt <- 0
sum <- 0
for(i in 1:100 ) {
if( i %% 3 == 0 )
sum <- sum + i
i <- count + 1
cnt <- count +1
}
print(sum)
cnt
cnt <- 0
sum <- 0
for(i in 1:100 ) {
if( i %% 3 == 0 )
sum <- sum + i
i <- count + 1
cnt <- cnt +1
}
sum
cnt
cnt <- 0
sum <- 0
for(i in 1:100 ) {
if( i %% 3 == 0 )
sum <- sum + i
i <- cnt + 1
cnt <- cnt +1
}
sum
cnt
cnt <- 0
sum <- 0
for(i in 1:100 ) {
if( i %% 3 == 0 )
sum <- sum + i
cnt <- cnt + 1
}
sum
cnt
sum <- 0
i <- 0
for(i in 101:200 ) {
if( i%%3 ==0 | i%%4 ==0)
sum <- sum +1
}
print(sum)
for( i in 1:24) {
if (24%%i ==0 ) {
print(i)
}
}
print(i)
fac <- 1
for(i in 1:10)
fac <- fac*i
print(i)
for(i in 1:6) {
for(j in 1:i) {
}
cap('*')
}
for(i in 1:6) {
for(j in 1:i) {
}
cat('*')
}
cat('\n')
for(i in 1:6) {
for(j in 1:i) {
cat('*')
}
cat('\n')
}
result
score <- 80
result <- ifelse(score>60, 'pass', fail )
result
pr <- c()
for(i in 2:1000){
for(j in 2:i) {
if(i%%j==0) break
}
if(j==i)
prm <- c(prm, i)
}
pr <- c()
for(i in 2:1000){
for(j in 2:i) {
if(i%%j==0) break
}
if(j==i)
pr <- c(pr, i)
}
pr
fibo <- c(0,1)
while ( length(fibo) < 40 )
f.1 <- fibo(length(fibo)-1)
fibo <- c(0,1)
while ( length(fibo) < 40 )
f.1 <- fibo(length(fibo)-1)
fibo <- c(0,1)
while ( length(fibo) < 40 )
f.1 <- fibo(length(fibo)-1)
fibo
apply(iris[1,4], 1, mean)
apply(iris[1,4], 1, mean)
apply(iris[1,4], 1, mean)
apply(iris[, 1,4], 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, -5 ], 1, mena)
apply(iris[, -5], 1, mean)
apply(iris[, -5], 1,  sum)
apply(iris [,5] ,2 , max)
apply(iris[, 5] ,2 , max)
apply(iris[, 1:4], 2, mean)
apply(iris[, -5], 1,  sum)
apply(iris[, 5] ,2 , max)
apply(iris[, 5], 2, max)
head(mtcars)
class(mtcars)
apply(mtcars, 2, max  )
apply(mtcars, 2, sum  )
apply(mtcars, 1, max  )
apply(mtcars, 1, sum  )
mymax <- function(x,y) {
num.max <- x
if (y > x) {
num.max <- y
}
return(num.max)
}
mymax
mymax(10,15)
myfunc <-  function(x,y){
sum <- x+y
mul <- x*y
div <- x/y
mod <- x%%y
return(list(rsum=sum, rmul=mul, rdiv=div, rmod=mod))
}
result$sum
result$rsum
rusult <- myfunc(20,10)
result$rsum
myfunc <-  function(x,y){
sum <- x+y
mul <- x*y
div <- x/y
mod <- x%%y
return(list(rsum=sum, rmul=mul, rdiv=div, rmod=mod))
}
rusult <- myfunc(20,10)
result$rsum
rusult <- myfunc(20,10)
result$rsum
myfunc <-  function(x,y){
sum <- x+y
mul <- x*y
div <- x/y
mod <- x%%y
return(list(rsum=sum, rmul=mul, rdiv=div, rmod=mod))
}
sum <- x+y
mul <- x*y
div <- x/y
mod <- x%%y
return(list(rsum=sum, rmul=mul, rdiv=div, rmod=mod))
source ('d:/ai/study/r_study/myfunc.r')
source ('d:/ai/study/r_study/myfunc.r')
a <- myfu(100,50)
a$rsum
a$rmul
which(score==69)
score <- c(76, 84, 69, 50, 95, 60, 82, 71, 88, 84)
which(score==69)
score <- c(76, 84, 69, 50, 95, 60, 82, 71, 88, 84, 69)
which(score==69)
which(score==100)
which(score>=85)
max(score)
whichmax(score)
which.max(score)
min(score)
which.min(score)
which(score<=60)
score[idx]
score[idx] <- 61
idx <- which(score<=60)
score[idx] <- 61
which.min(score)
which.min(score)
score
idx2 <- which(score>=80)
idx2
score.high <- score[idx2]
score.high
idx3 <- which(iris$Petal.Length>5.0)
idx3
iris.big <- iris[idx3,]
iris.big
idx4 <- which(iris[,1:4 ]>5.0, arr.ind = T)
idx4
head(iris)
result <- lgm(10,8)
lgm <- function(x,y){
result <- 0
for(i in 1:max(x,y))
if(x%%y==0 & y%%i==0){
result <- i;
}
}
result <- lgm(10,8)
lgm <- function(x,y){
result <- 0
for(i in 1:max(x,y))
if(x%%y==0 & y%%i==0){
result <- i;
}
}
return result
lgm <- function(x,y){
result <- 0
for(i in 1:max(x,y)){
if(x%%y==0 & y%%i==0){
result <- i;
}
}
return result
lgm <- function(x,y){
result <- 0
for(i in 1:max(x,y)){
if(x%%i == 0 &  y%%i ==0){
result <- i;
}
}
return( result )
}
result <- lgm(10,8)
lgm(10,20)
rv$max
maxmin <- function(x) {
fmax <- max(x)
fmin <- min(x)
return( list(max=fmax, win=fmin))
v <- c(1,5,9,9,29,50)
rc <- maxmin(v)
rv$max
maxmin <- function(x) {
fmax <- max(x)
fmin <- min(x)
return( list(max=fmax, win=fmin))
v <- c(1,5,9,9,29,50)
rv <- maxmin(v)
rv$max
rv$min
rv <- maxmin(v)
rv$max
rv$min
maxmin <- function(x) {
fmax <- max(x)
fmin <- min(x)
return( list(max=fmax, win=fmin))
v <- c(1,5,9,9,29,50)
rv <- maxmin(v)
rv$max
rv$min
max(weight)
weight <- c(69, 50, 55, 71, 89, 64, 59, 70, 71, 80)
max(weight)
weight <- c(69, 50, 55, 71, 89, 64, 59, 70, 71, 80)
max(weight)
score <- c(76, 84, 69, 50, 95, 60, 82, 71, 88, 84, 69)
max(score)
min(score)
score <- c(76, 84, 69, 50, 95, 60, 82, 71, 88, 84, 69)
which(score==69)
which(score==100)
max(score)
